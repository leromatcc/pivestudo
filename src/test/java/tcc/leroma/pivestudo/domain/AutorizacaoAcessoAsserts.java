package tcc.leroma.pivestudo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AutorizacaoAcessoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutorizacaoAcessoAllPropertiesEquals(AutorizacaoAcesso expected, AutorizacaoAcesso actual) {
        assertAutorizacaoAcessoAutoGeneratedPropertiesEquals(expected, actual);
        assertAutorizacaoAcessoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutorizacaoAcessoAllUpdatablePropertiesEquals(AutorizacaoAcesso expected, AutorizacaoAcesso actual) {
        assertAutorizacaoAcessoUpdatableFieldsEquals(expected, actual);
        assertAutorizacaoAcessoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutorizacaoAcessoAutoGeneratedPropertiesEquals(AutorizacaoAcesso expected, AutorizacaoAcesso actual) {
        assertThat(expected)
            .as("Verify AutorizacaoAcesso auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutorizacaoAcessoUpdatableFieldsEquals(AutorizacaoAcesso expected, AutorizacaoAcesso actual) {
        assertThat(expected)
            .as("Verify AutorizacaoAcesso relevant properties")
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getDataInicial()).as("check dataInicial").isEqualTo(actual.getDataInicial()))
            .satisfies(e -> assertThat(e.getDataFinal()).as("check dataFinal").isEqualTo(actual.getDataFinal()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAutorizacaoAcessoUpdatableRelationshipsEquals(AutorizacaoAcesso expected, AutorizacaoAcesso actual) {
        assertThat(expected)
            .as("Verify AutorizacaoAcesso relationships")
            .satisfies(e -> assertThat(e.getPessoa()).as("check pessoa").isEqualTo(actual.getPessoa()))
            .satisfies(e -> assertThat(e.getEstabelecimento()).as("check estabelecimento").isEqualTo(actual.getEstabelecimento()));
    }
}
