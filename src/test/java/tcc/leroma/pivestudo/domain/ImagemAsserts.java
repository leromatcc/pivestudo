package tcc.leroma.pivestudo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ImagemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemAllPropertiesEquals(Imagem expected, Imagem actual) {
        assertImagemAutoGeneratedPropertiesEquals(expected, actual);
        assertImagemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemAllUpdatablePropertiesEquals(Imagem expected, Imagem actual) {
        assertImagemUpdatableFieldsEquals(expected, actual);
        assertImagemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemAutoGeneratedPropertiesEquals(Imagem expected, Imagem actual) {
        assertThat(expected)
            .as("Verify Imagem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemUpdatableFieldsEquals(Imagem expected, Imagem actual) {
        assertThat(expected)
            .as("Verify Imagem relevant properties")
            .satisfies(e -> assertThat(e.getArquivoImagem()).as("check arquivoImagem").isEqualTo(actual.getArquivoImagem()))
            .satisfies(e ->
                assertThat(e.getArquivoImagemContentType())
                    .as("check arquivoImagem contenty type")
                    .isEqualTo(actual.getArquivoImagemContentType())
            )
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getCaminho()).as("check caminho").isEqualTo(actual.getCaminho()))
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getCadeiaDetectada()).as("check cadeiaDetectada").isEqualTo(actual.getCadeiaDetectada()))
            .satisfies(e -> assertThat(e.getDateAnalise()).as("check dateAnalise").isEqualTo(actual.getDateAnalise()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertImagemUpdatableRelationshipsEquals(Imagem expected, Imagem actual) {
        assertThat(expected)
            .as("Verify Imagem relationships")
            .satisfies(e -> assertThat(e.getRegistroAcesso()).as("check registroAcesso").isEqualTo(actual.getRegistroAcesso()));
    }
}
