package tcc.leroma.pivestudo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LoteBlocoApartamentoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoteBlocoApartamentoAllPropertiesEquals(LoteBlocoApartamento expected, LoteBlocoApartamento actual) {
        assertLoteBlocoApartamentoAutoGeneratedPropertiesEquals(expected, actual);
        assertLoteBlocoApartamentoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoteBlocoApartamentoAllUpdatablePropertiesEquals(LoteBlocoApartamento expected, LoteBlocoApartamento actual) {
        assertLoteBlocoApartamentoUpdatableFieldsEquals(expected, actual);
        assertLoteBlocoApartamentoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoteBlocoApartamentoAutoGeneratedPropertiesEquals(LoteBlocoApartamento expected, LoteBlocoApartamento actual) {
        assertThat(expected)
            .as("Verify LoteBlocoApartamento auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoteBlocoApartamentoUpdatableFieldsEquals(LoteBlocoApartamento expected, LoteBlocoApartamento actual) {
        assertThat(expected)
            .as("Verify LoteBlocoApartamento relevant properties")
            .satisfies(e -> assertThat(e.getBloco()).as("check bloco").isEqualTo(actual.getBloco()))
            .satisfies(e -> assertThat(e.getAndar()).as("check andar").isEqualTo(actual.getAndar()))
            .satisfies(e -> assertThat(e.getNumero()).as("check numero").isEqualTo(actual.getNumero()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoteBlocoApartamentoUpdatableRelationshipsEquals(LoteBlocoApartamento expected, LoteBlocoApartamento actual) {
        assertThat(expected)
            .as("Verify LoteBlocoApartamento relationships")
            .satisfies(e -> assertThat(e.getEndereco()).as("check endereco").isEqualTo(actual.getEndereco()))
            .satisfies(e -> assertThat(e.getPessoa()).as("check pessoa").isEqualTo(actual.getPessoa()));
    }
}
