package tcc.leroma.pivestudo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RegistroAcessoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegistroAcessoAllPropertiesEquals(RegistroAcesso expected, RegistroAcesso actual) {
        assertRegistroAcessoAutoGeneratedPropertiesEquals(expected, actual);
        assertRegistroAcessoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegistroAcessoAllUpdatablePropertiesEquals(RegistroAcesso expected, RegistroAcesso actual) {
        assertRegistroAcessoUpdatableFieldsEquals(expected, actual);
        assertRegistroAcessoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegistroAcessoAutoGeneratedPropertiesEquals(RegistroAcesso expected, RegistroAcesso actual) {
        assertThat(expected)
            .as("Verify RegistroAcesso auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegistroAcessoUpdatableFieldsEquals(RegistroAcesso expected, RegistroAcesso actual) {
        assertThat(expected)
            .as("Verify RegistroAcesso relevant properties")
            .satisfies(e -> assertThat(e.getDataHora()).as("check dataHora").isEqualTo(actual.getDataHora()))
            .satisfies(e -> assertThat(e.getCadeiaAnalisada()).as("check cadeiaAnalisada").isEqualTo(actual.getCadeiaAnalisada()))
            .satisfies(e -> assertThat(e.getAcessoAutorizado()).as("check acessoAutorizado").isEqualTo(actual.getAcessoAutorizado()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegistroAcessoUpdatableRelationshipsEquals(RegistroAcesso expected, RegistroAcesso actual) {
        assertThat(expected)
            .as("Verify RegistroAcesso relationships")
            .satisfies(e -> assertThat(e.getPontoAcesso()).as("check pontoAcesso").isEqualTo(actual.getPontoAcesso()))
            .satisfies(e -> assertThat(e.getAutomovel()).as("check automovel").isEqualTo(actual.getAutomovel()))
            .satisfies(e -> assertThat(e.getAutorizacaoAcesso()).as("check autorizacaoAcesso").isEqualTo(actual.getAutorizacaoAcesso()));
    }
}
